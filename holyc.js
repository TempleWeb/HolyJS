/**
 * @Copyright Leonardo Z. Nunes 2022
 * @license MIT
 * @fileoverview JS HolyC Interpreter
 * @version 0.0.0
 */
 export const holyc_web_run=()=>{alert(output(parser(lex(document.getElementById("stdin").value))))};export const holy_node=e=>output(parser(lex(e)));class AstNode{token;next;left;right;constructor(e){this.type=e}}class Ast{next;ast}var symbolTable,stdout,proceduresPrototypes,tokenListIndexWalk;const tokenType={const:1,str:2,id:3,add:4,sub:5,div:6,mul:7,semi:8,lbrace:9,rbrace:10,i0:11,u0:12,i8:13,u8:14,i16:15,u16:16,i32:17,u32:18,i64:19,u64:20,f64:21,rparen:22,lparen:23,call:24,comma:25,assig:26,less:27,big:28,for:29,increment:30,decrement:31,assingsum:32,assingsub:33,assingdiv:34,assingmul:35,if:36,or:37,and:38,not:39,else:40,true:41,false:42,equal:43,return:44,bigequal:45,lessequal:46},get_symtab=e=>{for(let t=0;t<symbolTable.length;++t)if(symbolTable[t].id===e.id)return t},get_prototype=e=>{for(let t=0;t<proceduresPrototypes.length;++t)if(proceduresPrototypes[t].id===e.id)return t},is_alpha=e=>" "!==e&&"\n"!==e&&/^[A-Z0-9_]$/i.test(e),is_digit=e=>" "!==e&&"\n"!==e&&!isNaN(e),lexer_error=e=>{const t=`compile failure\nlexer: '${e.id}' unexpected token in line ${e.line}\n`;try{throw alert(t)}catch{throw new Error(t)}},parser_error=e=>{const t=`compile failure\nparser: '${e.id}' unexpected token in line ${e.line}\n`;try{throw alert(t)}catch{throw new Error(t)}},remove_tabs=e=>e.replace(/\t/g,""),check_symtab=(e,t)=>{symtab_contain(e[tokenListIndexWalk])!==t&&parser_error(e[tokenListIndexWalk])},list_eat=(e,t)=>{try{if(e[tokenListIndexWalk].type!==t)throw new Error;tokenListIndexWalk++}catch{parser_error(e[tokenListIndexWalk]?e[tokenListIndexWalk]:e[tokenListIndexWalk-1])}},symtab_contain=e=>!!symbolTable.filter((t=>t.id===e.id)).length,check_token=(e,t,n)=>{try{return e[t].type===n}catch{parser_error(e[t-1])}},check_ast_type=(e,t)=>{switch(t){case"id":return e===tokenType.id;case"data_type":return e===tokenType.i0||e===tokenType.u0||e===tokenType.i8||e===tokenType.u8||e===tokenType.i16||e===tokenType.u16||e===tokenType.i32||e===tokenType.u32||e===tokenType.i64||e===tokenType.u64||e===tokenType.f64;case"assignment_operator":return e===tokenType.assingdiv||e===tokenType.assingmul||e===tokenType.assingsub||e===tokenType.assingsum}},is_dtype=(e,t)=>{try{let n=e[t].type;return n===tokenType.i0||n===tokenType.u0||n===tokenType.i8||n===tokenType.u8||n===tokenType.i16||n===tokenType.u16||n===tokenType.i32||n===tokenType.u32||n===tokenType.i64||n===tokenType.u64||n===tokenType.f64}catch{parser_error(e[t-1])}},is_logicalop=(e,t)=>{try{let n=e[t].type;return n===tokenType.big||n===tokenType.less||n===tokenType.or||n===tokenType.and||n===tokenType.not||n===tokenType.equal}catch{parser_error(e[t-1])}},is_mathop=(e,t)=>{try{let n=e[t].type;return n===tokenType.add||n===tokenType.sub||n===tokenType.div||n===tokenType.mul||n===tokenType.increment||n===tokenType.decrement}catch{parser_error(e[t-1])}},is_assingop=(e,t)=>{try{let n=e[t].type;return n===tokenType.assingdiv||n===tokenType.assingmul||n===tokenType.assingsub||n===tokenType.assingsum||n===tokenType.assig}catch{parser_error(e[t-1])}},list_eat_type=e=>{is_dtype(e,tokenListIndexWalk)?tokenListIndexWalk++:parser_error(e[tokenListIndexWalk])},list_eat_logical=e=>{is_logicalop(e,tokenListIndexWalk)?tokenListIndexWalk++:parser_error(e[tokenListIndexWalk])},list_eat_math=e=>{is_mathop(e,tokenListIndexWalk)?tokenListIndexWalk++:parser_error(e[tokenListIndexWalk])},list_eat_compassing=e=>{is_assingop(e,tokenListIndexWalk)?tokenListIndexWalk++:parser_error(e[tokenListIndexWalk])},lex_type=e=>{switch(e){case"I0":return tokenType.i0;case"U0":return tokenType.u0;case"I8":return tokenType.i8;case"U8":return tokenType.u8;case"I16":return tokenType.i16;case"U16":return tokenType.u16;case"I32":return tokenType.i32;case"U32":return tokenType.u32;case"I64":return tokenType.i64;case"U64":return tokenType.u64;case"F64":return tokenType.f64;default:return null}},lex_keyword=e=>{switch(e){case"for":return tokenType.for;case"if":return tokenType.if;case"else":return tokenType.else;case"return":return tokenType.return;case"TRUE":return tokenType.true;case"FALSE":return tokenType.false;default:return tokenType.id}},lex=e=>{if(stdout="",!e){const e="compile failure\nlexer: nothing to compile\n";try{throw alert(e)}catch{throw new Error(e)}}e=e.replace(/\t/g,"");var t=[],n=1;for(let o=0;o<e.length;++o)if("\n"===e[o]&&n++," "!==e[o]&&"\n"!==e[o])if("/"!==e[o]||"/"!==e[o+1])if("'"!==e[o])if('"'!==e[o])if(is_digit(e[o])){let s="";for(;is_digit(e[o]);)s+=e[o++];o--,t.push({id:s,line:n,type:tokenType.const})}else if(is_alpha(e[o])){let s="";for(;is_alpha(e[o]);)s+=e[o++];o--;let k=lex_type(s);k||(k=lex_keyword(s)),t.push({id:s,line:n,type:k})}else switch(e[o]){case"+":"+"===e[o+1]?(o++,t.push({id:"++",line:n,type:tokenType.increment})):"="===e[o+1]?(o++,t.push({id:"+=",line:n,type:tokenType.assingsum})):t.push({id:"+",line:n,type:tokenType.add});break;case"-":"-"===e[o+1]?(o++,t.push({id:"--",line:n,type:tokenType.decrement})):"="===e[o+1]?(o++,t.push({id:"-=",line:n,type:tokenType.assingsub})):t.push({id:"-",line:n,type:tokenType.sub});break;case"*":"="===e[o+1]?(o++,t.push({id:"*=",line:n,type:tokenType.assingmul})):t.push({id:"*",line:n,type:tokenType.mul});break;case"/":"="===e[o+1]?(o++,t.push({id:"/=",line:n,type:tokenType.assingdiv})):t.push({id:"/",line:n,type:tokenType.div});break;case";":t.push({id:";",line:n,type:tokenType.semi});break;case"{":t.push({id:"{",line:n,type:tokenType.rbrace});break;case"}":t.push({id:"}",line:n,type:tokenType.lbrace});break;case"(":t.push({id:"(",line:n,type:tokenType.rparen});break;case")":t.push({id:")",line:n,type:tokenType.lparen});break;case",":t.push({id:",",line:n,type:tokenType.comma});break;case"=":"="===e[o+1]?(o++,t.push({id:"==",line:n,type:tokenType.equal})):t.push({id:"=",line:n,type:tokenType.assig});break;case"<":"="===e[o+1]?(o++,t.push({id:"<=",line:n,type:tokenType.lessequal})):t.push({id:"<",line:n,type:tokenType.less});break;case">":"="===e[o+1]?(o++,t.push({id:">=",line:n,type:tokenType.bigequal})):t.push({id:">",line:n,type:tokenType.big});break;case"!":t.push({id:"!",line:n,type:tokenType.not});break;case"&":"&"===e[o+1]&&(o++,t.push({id:"&&",line:n,type:tokenType.and}));break;case"|":"|"===e[o+1]&&(o++,t.push({id:"||",line:n,type:tokenType.or}));break;default:lexer_error({id:e[o],line:n})}else{let s="";for(o++;'"'!==e[o]&&e[o];)s+=e[o++];t.push({id:s,line:n,type:tokenType.str})}else{let s="";for(o++;"'"!==e[o]&&e[o];)s+=e[o++];t.push({id:s,line:n,type:tokenType.str})}else{for(o++;"\n"!==e[o];)o++;n++}return t},parser_parse_logical_exp=e=>{if(check_token(e,tokenListIndexWalk,tokenType.semi)||check_token(e,tokenListIndexWalk,tokenType.comma)||check_token(e,tokenListIndexWalk,tokenType.lparen))return null;let t;return check_token(e,tokenListIndexWalk-1,tokenType.id)||check_token(e,tokenListIndexWalk-1,tokenType.const)||check_token(e,tokenListIndexWalk-1,tokenType.true)||check_token(e,tokenListIndexWalk-1,tokenType.false)?is_logicalop(e,tokenListIndexWalk)?(t=new AstNode(e[tokenListIndexWalk]?.type),t.token=e[tokenListIndexWalk],list_eat_logical(e)):(check_token(e,tokenListIndexWalk-1,tokenType.id)||check_token(e,tokenListIndexWalk-1,tokenType.const))&&is_mathop(e,tokenListIndexWalk)&&(check_token(e,tokenListIndexWalk+1,tokenType.id)||check_token(e,tokenListIndexWalk+1,tokenType.const))&&(t=new AstNode(e[tokenListIndexWalk]?.type),t.token=e[tokenListIndexWalk],list_eat_math(e)):is_logicalop(e,tokenListIndexWalk-1)&&check_token(e,tokenListIndexWalk,tokenType.not)?(t=new AstNode(tokenType.not),t.token=e[tokenListIndexWalk],list_eat(e,tokenType.not)):check_token(e,tokenListIndexWalk,tokenType.id)?(check_symtab(e,!0),t=new AstNode(tokenType.id),t.token=e[tokenListIndexWalk],list_eat(e,tokenType.id)):check_token(e,tokenListIndexWalk,tokenType.true)?(t=new AstNode(tokenType.true),t.token={id:1,line:e[tokenListIndexWalk].line,type:tokenType.const},list_eat(e,tokenType.true)):check_token(e,tokenListIndexWalk,tokenType.false)?(t=new AstNode(tokenType.const),t.token={id:0,line:e[tokenListIndexWalk].line,type:tokenType.const},list_eat(e,tokenType.false)):(t=new AstNode(tokenType.const),t.token=e[tokenListIndexWalk],list_eat(e,tokenType.const)),t.right=parser_parse_logical_exp(e),t},parser_parse_exp=(e,t,n)=>{if(check_token(e,tokenListIndexWalk,tokenType.semi)||check_token(e,tokenListIndexWalk,tokenType.comma)||t&&check_token(e,tokenListIndexWalk,tokenType.lparen))return null;let o;if(proceduresPrototypes.find((t=>t.id===e[tokenListIndexWalk].id)))return parser_parse_call(e);if(check_token(e,tokenListIndexWalk-1,tokenType.id)||check_token(e,tokenListIndexWalk-1,tokenType.const))is_mathop(e,tokenListIndexWalk)?(check_token(e,tokenListIndexWalk+1,tokenType.id)||check_token(e,tokenListIndexWalk+1,tokenType.const))&&(o=new AstNode(e[tokenListIndexWalk]?.type),o.token=e[tokenListIndexWalk],list_eat_math(e)):is_assingop(e,tokenListIndexWalk)?(o=new AstNode(e[tokenListIndexWalk]?.type),o.token=e[tokenListIndexWalk],list_eat_compassing(e)):(o=new AstNode(tokenType.assig),o.token=e[tokenListIndexWalk],list_eat(e,tokenType.assig));else if(check_token(e,tokenListIndexWalk-1,tokenType.assig)||is_assingop(e,tokenListIndexWalk-1))if(check_token(e,tokenListIndexWalk,tokenType.id)){let t;t=n?proceduresPrototypes[n-1].args.find((t=>t.id===e[tokenListIndexWalk].id)):proceduresPrototypes.find((t=>t.id===e[tokenListIndexWalk].id)),!t&&check_symtab(e,!0),o=new AstNode(tokenType.id),o.token=e[tokenListIndexWalk],list_eat(e,tokenType.id)}else symbolTable[get_symtab(e[tokenListIndexWalk-2])]={id:e[tokenListIndexWalk-2].id,line:e[tokenListIndexWalk-2].line,value:e[tokenListIndexWalk].id},o=new AstNode(tokenType.const),o.token=e[tokenListIndexWalk],list_eat(e,tokenType.const);else if(is_mathop(e,tokenListIndexWalk-1)||check_token(e,tokenListIndexWalk-1,tokenType.return))if(check_token(e,tokenListIndexWalk,tokenType.id)){let t;n&&(t=proceduresPrototypes[n-1].args.find((t=>t.id===e[tokenListIndexWalk].id))),!t&&check_symtab(e,!0),o=new AstNode(tokenType.id),o.token=e[tokenListIndexWalk],list_eat(e,tokenType.id)}else o=new AstNode(tokenType.const),o.token=e[tokenListIndexWalk],list_eat(e,tokenType.const);else if(check_token(e,tokenListIndexWalk,tokenType.id)){let t;n&&(t=proceduresPrototypes[n-1].args.find((t=>t.id===e[tokenListIndexWalk].id))),!t&&check_symtab(e,!0),o=new AstNode(tokenType.id),o.token=e[tokenListIndexWalk],list_eat(e,tokenType.id)}else check_token(e,tokenListIndexWalk,tokenType.semi)?parser_error(e[tokenListIndexWalk]):(o=new AstNode(tokenType.comma),o.token=e[tokenListIndexWalk],list_eat(e,tokenType.comma));return o.right=parser_parse_exp(e,t,n),o},parser_parse_str_args=e=>{if(check_token(e,tokenListIndexWalk,tokenType.semi))return null;let t;return check_token(e,tokenListIndexWalk,tokenType.id)||check_token(e,tokenListIndexWalk,tokenType.const)?(t=new AstNode(e[tokenListIndexWalk]?.type),t.token=e[tokenListIndexWalk],list_eat(e,e[tokenListIndexWalk].type)):check_token(e,tokenListIndexWalk,tokenType.str)?(t=new AstNode(tokenType.str),t.token=e[tokenListIndexWalk],list_eat(e,tokenType.str)):t=parser_parse_exp(e,!1),check_token(e,tokenListIndexWalk,tokenType.assig)?(t.left=new AstNode(tokenType.assig),t.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.assig),t.left.right=parser_parse_exp(e,!1)):check_token(e,tokenListIndexWalk,tokenType.semi)||(t.left=new AstNode(tokenType.comma),t.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.comma)),t.right=parser_parse_str_args(e),t},parser_parse_inline_str=e=>{if(check_token(e,tokenListIndexWalk,tokenType.semi))return null;let t=new AstNode(tokenType.str);return t.token=e[tokenListIndexWalk],list_eat(e,tokenType.str),check_token(e,tokenListIndexWalk,tokenType.semi)||(t.next=new AstNode(tokenType.comma),t.next.token=e[tokenListIndexWalk],list_eat(e,tokenType.comma),check_token(e,tokenListIndexWalk,tokenType.str)||parser_error(e[tokenListIndexWalk])),t.right=parser_parse_inline_str(e),t},parser_parse_return=(e,t)=>{let n=new AstNode(tokenType.return);return n.token=e[tokenListIndexWalk],list_eat(e,tokenType.return),n.right=parser_parse_exp(e,!1,t),n.left=new AstNode(tokenType.semi),n.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.semi),n},parser_parse_str=e=>{let t=new AstNode(tokenType.str);return t.token=e[tokenListIndexWalk],list_eat(e,tokenType.str),check_token(e,tokenListIndexWalk,tokenType.semi)?(t.left=new AstNode(tokenType.semi),t.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.semi)):(t.left=new AstNode(tokenType.comma),t.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.comma),check_token(e,tokenListIndexWalk,tokenType.str)?(t.right=parser_parse_inline_str(e),t.left.left=new AstNode(tokenType.semi),t.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.semi)):(t.left.right=parser_parse_str_args(e),t.left.left=new AstNode(tokenType.semi),t.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.semi))),t},parser_parse_block=(e,t)=>{if(check_token(e,tokenListIndexWalk,tokenType.lbrace))return null;let n;switch(e[tokenListIndexWalk].type){case tokenType.i0:case tokenType.u0:case tokenType.i8:case tokenType.u8:case tokenType.i16:case tokenType.u16:case tokenType.i32:case tokenType.u32:case tokenType.i64:case tokenType.u64:case tokenType.f64:case tokenType.id:n=parser_parse_id(e,t);break;case tokenType.increment:case tokenType.decrement:n=parser_parse_prepostfix(e,!1);break;case tokenType.str:n=parser_parse_str(e);break;case tokenType.for:n=parser_parse_for(e);break;case tokenType.if:n=parser_parse_ifelse(e);break;case tokenType.return:n=parser_parse_return(e,t);break;default:parser_error(e[tokenListIndexWalk])}return n.next=parser_parse_block(e,t),n},parser_parse_args=(e=[])=>{if(check_token(e,tokenListIndexWalk,tokenType.lparen))return null;let t=new AstNode(e[tokenListIndexWalk]?.type);return t.token=e[tokenListIndexWalk],list_eat_type(e),t.next=new AstNode(tokenType.id),t.next.token=e[tokenListIndexWalk],list_eat(e,tokenType.id),check_token(e,tokenListIndexWalk,tokenType.assig)&&(t.next.next=new AstNode(tokenType.assig),t.next.next.token=e[tokenListIndexWalk],list_eat(e,tokenType.assig),check_token(e,tokenListIndexWalk,tokenType.const)?(t.next.next.next=new AstNode(tokenType.const),t.next.next.next.token=e[tokenListIndexWalk],list_eat(e,tokenType.const)):(t.next.next.next=new AstNode(tokenType.str),t.next.next.next.token=e[tokenListIndexWalk],list_eat(e,tokenType.str))),check_token(e,tokenListIndexWalk,tokenType.lparen)||(t.next.next=new AstNode(tokenType.comma),t.next.next.token=e[tokenListIndexWalk],list_eat(e,tokenType.comma)),t.right=parser_parse_args(e),t},parser_parse_call_args=(e,t,n,o)=>{if(proceduresPrototypes[t].args.length===o)return null;let s;if(proceduresPrototypes[t].args[o]?.id?check_token(e,tokenListIndexWalk,tokenType.id)?(check_symtab(e,!0),s=new AstNode(tokenType.id),s.token=e[tokenListIndexWalk],list_eat(e,tokenType.id),is_mathop(e,tokenListIndexWalk)):check_token(e,tokenListIndexWalk,tokenType.const)&&(s=new AstNode(tokenType.const),s.token=e[tokenListIndexWalk],list_eat(e,tokenType.const)):check_token(e,tokenListIndexWalk,tokenType.id)?(check_symtab(e,!0),s=new AstNode(tokenType.id),s.token=e[tokenListIndexWalk],list_eat(e,tokenType.id)):(s=new AstNode(tokenType.const),s.token=e[tokenListIndexWalk],list_eat(e,tokenType.const)),!(o<proceduresPrototypes[t].args.length-1))return s;if(s){if(!check_token(e,tokenListIndexWalk,tokenType.comma))return s;s.left=new AstNode(tokenType.comma),s.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.comma)}else if(n||check_token(e,tokenListIndexWalk,tokenType.comma))s=new AstNode(tokenType.comma),s.token=e[tokenListIndexWalk],list_eat(e,tokenType.comma);else if(!n||check_token(e,tokenListIndexWalk,tokenType.rparen))return s;return s.right=parser_parse_call_args(e,t,n,++o),s},parser_parse_call=e=>{proceduresPrototypes.findIndex((t=>t.id===e[tokenListIndexWalk].id))<0&&check_symtab(e,!0);const t=get_prototype(e[tokenListIndexWalk]);let n=new AstNode(tokenType.call);if(n.token=e[tokenListIndexWalk],list_eat(e,tokenType.id),proceduresPrototypes[t].args.length){const o=proceduresPrototypes[t].args.filter((e=>void 0===e.id)).length;if(check_token(e,tokenListIndexWalk,tokenType.semi)&&!o)return n.left=new AstNode(tokenType.semi),n.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.semi),n;n.left=new AstNode(tokenType.rparen),n.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.rparen),check_token(e,tokenListIndexWalk,tokenType.str)&&!o&&"*"===e[tokenListIndexWalk].id?(n.left.left=new AstNode(tokenType.str),n.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.str)):proceduresPrototypes[t].args.length&&(n.right=parser_parse_call_args(e,t,o,0)),n.left.left=new AstNode(tokenType.lparen),n.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.lparen)}else check_token(e,tokenListIndexWalk,tokenType.rparen)&&(n.left=new AstNode(tokenType.rparen),n.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.rparen),check_token(e,tokenListIndexWalk,tokenType.str)&&"*"===e[tokenListIndexWalk].id&&(n.left.next=new AstNode(tokenType.str),n.left.next.token=e[tokenListIndexWalk],list_eat(e,tokenType.str)),n.left.left=new AstNode(tokenType.lparen),n.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.lparen));return n},parser_parse_inline_vars=e=>{if(check_token(e,tokenListIndexWalk,tokenType.semi)&&!check_token(e,tokenListIndexWalk-1,tokenType.comma))return null;check_symtab(e,!1);let t=e[tokenListIndexWalk],n=new AstNode(tokenType.id);return n.token=e[tokenListIndexWalk],list_eat(e,tokenType.id),check_token(e,tokenListIndexWalk,tokenType.assig)?(symbolTable.push({...t,const:0}),n.left=parser_parse_exp(e,!1),check_token(e,tokenListIndexWalk,tokenType.semi)||(n.left.left=new AstNode(tokenType.comma),n.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.comma))):check_token(e,tokenListIndexWalk,tokenType.semi)?symbolTable.push({...t,const:0}):(symbolTable.push({...t,const:0}),n.left=new AstNode(tokenType.comma),n.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.comma)),n.right=parser_parse_inline_vars(e),n},parser_parse_id=(e,t)=>{if(check_token(e,tokenListIndexWalk,tokenType.id)){if(is_assingop(e,tokenListIndexWalk+1)){let n=parser_parse_exp(e,!1,t);return n.left=new AstNode(tokenType.semi),n.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.semi),n}if(check_token(e,tokenListIndexWalk+1,tokenType.increment)||check_token(e,tokenListIndexWalk+1,tokenType.decrement))return parser_parse_prepostfix(e,!1);{let t=parser_parse_call(e);return list_eat(e,tokenType.semi),t}}let n=new AstNode(e[tokenListIndexWalk]?.type);n.token=e[tokenListIndexWalk],list_eat_type(e),proceduresPrototypes.findIndex((t=>t.id===e[tokenListIndexWalk].id))<0?t||check_symtab(e,!1):check_symtab(e,!0);let o=e[tokenListIndexWalk];if(n.left=new AstNode(tokenType.id),n.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.id),check_token(e,tokenListIndexWalk,tokenType.semi))symbolTable.push({...o,const:0}),n.left.left=new AstNode(tokenType.semi),n.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.semi);else if(check_token(e,tokenListIndexWalk,tokenType.comma))symbolTable.push({...o,const:0}),n.left.left=new AstNode(tokenType.comma),n.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.comma),n.right=parser_parse_inline_vars(e),n.left.left.left=new AstNode(tokenType.semi),n.left.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.semi);else if(check_token(e,tokenListIndexWalk,tokenType.assig))symbolTable.push({...o,const:0}),n.right=parser_parse_exp(e,!1,t),check_token(e,tokenListIndexWalk,tokenType.comma)?(n.left.left=new AstNode(tokenType.comma),n.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.comma),n.left.right=parser_parse_inline_vars(e),n.left.left.left=new AstNode(tokenType.semi),n.left.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.semi)):(n.left.left=new AstNode(tokenType.semi),n.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.semi));else if(!t){const t=e[tokenListIndexWalk-1].id;let o={id:t,type:e[tokenListIndexWalk-2].type,args:void 0,return:void 0};n.left.left=new AstNode(tokenType.rparen),n.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.rparen);let s=tokenListIndexWalk;n.left.left.right=parser_parse_args(e);let k=[];for(;s<tokenListIndexWalk;){let t={id:e[s+1].id,type:e[s].type,value:void 0};e[s+2].type===tokenType.assig&&(t.value=e[s+3].id,s+=2),s+=2,e[s].type===tokenType.comma&&s++,k.push(t)}o.args=k,proceduresPrototypes.push(o);const l=proceduresPrototypes.findIndex((e=>e.id===t))+1;n.left.left.left=new AstNode(tokenType.lparen),n.left.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.lparen),n.left.left.left.left=new AstNode(tokenType.rbrace),n.left.left.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.rbrace),n.right=parser_parse_block(e,l),n.left.left.left.left.left=new AstNode(tokenType.lbrace),n.left.left.left.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.lbrace)}return n},parser_parse_prepostfix=(e,t)=>{let n;return is_mathop(e,tokenListIndexWalk)?(check_token(e,tokenListIndexWalk,tokenType.increment)?(n=new AstNode(tokenType.increment),n.token=e[tokenListIndexWalk],list_eat_math(e)):(n=new AstNode(tokenType.decrement),n.token=e[tokenListIndexWalk],list_eat_math(e)),check_symtab(e,!0),n.right=new AstNode(tokenType.id),n.right.token=e[tokenListIndexWalk],list_eat(e,tokenType.id)):(check_symtab(e,!0),n=new AstNode(tokenType.id),n.token=e[tokenListIndexWalk],list_eat(e,tokenType.id),check_token(e,tokenListIndexWalk,tokenType.increment)?(n.right=new AstNode(tokenType.increment),n.right.token=e[tokenListIndexWalk],list_eat_math(e)):(n.right=new AstNode(tokenType.decrement),n.right.token=e[tokenListIndexWalk],list_eat_math(e))),t||(n.left=new AstNode(tokenType.semi),n.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.semi)),n},parser_parse_ifelse=e=>{let t=new AstNode(tokenType.if);return t.token=e[tokenListIndexWalk],list_eat(e,tokenType.if),t.left=new AstNode(tokenType.rparen),t.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.rparen),check_token(e,tokenListIndexWalk,tokenType.const)?(t.left.left=new AstNode(tokenType.const),t.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.const)):check_token(e,tokenListIndexWalk,tokenType.true)?(t.left.left=new AstNode(tokenType.true),t.left.left.token={id:1,line:e[tokenListIndexWalk].line,type:tokenType.const},list_eat(e,tokenType.true)):check_token(e,tokenListIndexWalk,tokenType.false)?(t.left.left=new AstNode(tokenType.const),t.left.left.token={id:0,line:e[tokenListIndexWalk].line,type:tokenType.const},list_eat(e,tokenType.false)):(check_symtab(e,!0),t.left.left=new AstNode(tokenType.id),t.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.id)),t.right=parser_parse_logical_exp(e),t.left.left.left=new AstNode(tokenType.lparen),t.left.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.lparen),t.left.left.next=new AstNode(tokenType.rbrace),t.left.left.next.token=e[tokenListIndexWalk],list_eat(e,tokenType.rbrace),t.left.left.left.right=parser_parse_block(e),t.left.left.next.next=new AstNode(tokenType.lbrace),t.left.left.next.next.token=e[tokenListIndexWalk],list_eat(e,tokenType.lbrace),tokenListIndexWalk<e.length&&check_token(e,tokenListIndexWalk,tokenType.else)&&(t.left.left.left.left=new AstNode(tokenType.else),t.left.left.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.else),check_token(e,tokenListIndexWalk,tokenType.if)?t.left.left.left.next=parser_parse_ifelse(e):(t.left.left.left.next=new AstNode(tokenType.rbrace),t.left.left.left.next.token=e[tokenListIndexWalk],list_eat(e,tokenType.rbrace),t.left.left.left.left.right=parser_parse_block(e),t.left.left.left.next.next=new AstNode(tokenType.lbrace),t.left.left.left.next.next.token=e[tokenListIndexWalk],list_eat(e,tokenType.lbrace))),t},parser_parse_for=e=>{let t=new AstNode(tokenType.for);return t.token=e[tokenListIndexWalk],list_eat(e,tokenType.for),t.next=new AstNode(tokenType.rparen),t.next.token=e[tokenListIndexWalk],list_eat(e,tokenType.rparen),check_symtab(e,!0),t.left=new AstNode(tokenType.id),t.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.id),t.right=parser_parse_exp(e,!1),t.left.left=new AstNode(tokenType.semi),t.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.semi),check_symtab(e,!0),t.left.left.left=new AstNode(tokenType.id),t.left.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.id),t.left.left.left.left=new AstNode(e[tokenListIndexWalk]?.type),t.left.left.left.left.token=e[tokenListIndexWalk],list_eat_logical(e),t.left.left.left.left.left=new AstNode(tokenType.const),t.left.left.left.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.const),t.left.left.left.left.left.left=new AstNode(tokenType.semi),t.left.left.left.left.left.left.token=e[tokenListIndexWalk],list_eat(e,tokenType.semi),check_token(e,tokenListIndexWalk,tokenType.increment)||check_token(e,tokenListIndexWalk,tokenType.decrement)||check_token(e,tokenListIndexWalk+1,tokenType.decrement)||check_token(e,tokenListIndexWalk+1,tokenType.increment)?t.left.left.left.left.left.left.left=parser_parse_prepostfix(e,!0):(check_symtab(e,!0),t.left.left.left.left.left.left.next=new AstNode(tokenType.id),t.left.left.left.left.left.left.next.token=e[tokenListIndexWalk],list_eat(e,tokenType.id),t.left.left.left.left.left.left.left=parser_parse_exp(e,!0)),t.left.left.left.left.left.left.left.next=new AstNode(tokenType.lparen),t.left.left.left.left.left.left.left.next.token=e[tokenListIndexWalk],list_eat(e,tokenType.lparen),t.left.left.left.left.left.left.next=new AstNode(tokenType.rbrace),t.left.left.left.left.left.left.next.token=e[tokenListIndexWalk],list_eat(e,tokenType.rbrace),t.left.left.left.left.left.left.right=parser_parse_block(e),t.left.left.left.left.left.left.next.next=new AstNode(tokenType.lbrace),t.left.left.left.left.left.left.next.next.token=e[tokenListIndexWalk],list_eat(e,tokenType.lbrace),t},parser_parse=e=>{if(!e[tokenListIndexWalk])return null;let t=new Ast;switch(e[tokenListIndexWalk].type){case tokenType.i0:case tokenType.u0:case tokenType.i8:case tokenType.u8:case tokenType.i16:case tokenType.u16:case tokenType.i32:case tokenType.u32:case tokenType.i64:case tokenType.u64:case tokenType.f64:case tokenType.id:t.ast=parser_parse_id(e);break;case tokenType.increment:case tokenType.decrement:t.ast=parser_parse_prepostfix(e,!1);break;case tokenType.str:t.ast=parser_parse_str(e);break;case tokenType.for:t.ast=parser_parse_for(e);break;case tokenType.if:t.ast=parser_parse_ifelse(e);break;default:parser_error(e[tokenListIndexWalk])}return t.next=parser_parse(e),t},parser=e=>(tokenListIndexWalk=0,symbolTable=[],proceduresPrototypes=[],parser_parse(e)),output_out_math_exp=(e,t)=>{let n=e;for(;t;){switch(t.type){case tokenType.div:t.right.token.type===tokenType.const?n/=parseInt(t.right.token.id):n/=parseInt(symbolTable[get_symtab(t.right.token)].const);break;case tokenType.mul:t.right.token.type===tokenType.const?n*=parseInt(t.right.token.id):n*=parseInt(symbolTable[get_symtab(t.right.token)].const);break;case tokenType.add:t.right.token.type===tokenType.const?n+=parseInt(t.right.token.id):n+=parseInt(symbolTable[get_symtab(t.right.token)].const);break;case tokenType.sub:t.right.token.type===tokenType.const?n-=parseInt(t.right.token.id):n-=parseInt(symbolTable[get_symtab(t.right.token)].const)}if(!t?.right?.right)break;if((t=t.right.right).type!==tokenType.add&&t.type!==tokenType.sub&&t.type!==tokenType.div&&t.type!==tokenType.mul)break}return n},output_out_logical_exp=(e,t)=>{let n,o,s,k={number:0,boolean:!1};if(t||e.left.left.token.type!==tokenType.not?t?t&&e.right.token.type===tokenType.not?(n=e.right.right.token,o=e.right.right.right):t&&(n=e.right.token,o=e.right.right):(n=e.left.left.token,o=e.right):(n=e.right.token,o=e.right.right),n.type===tokenType.id?k.number=parseInt(symbolTable[get_symtab(n)].const):k.number=parseInt(n.id),o?.token.type===tokenType.add||o?.token.type===tokenType.sub||o?.token.type===tokenType.div||o?.token.type===tokenType.mul)for(k.number=output_out_math_exp(k.number,o);o&&(o=o.right,!o||o.token.type!==tokenType.or&&o.token.type!==tokenType.and&&o.token.type!==tokenType.big&&o.token.type!==tokenType.less&&o.token.type!==tokenType.bigequal&&o.token.type!==tokenType.lessequal&&o.token.type!==tokenType.equal););for(k.number&&(k.boolean=!0);o;){if(o.right?.right?.token.type===tokenType.add||o.right?.right?.token.type===tokenType.sub||o.right?.right?.token.type===tokenType.div||o.right?.right?.token.type===tokenType.mul||o.right?.right?.token.type===tokenType.not){let e;e=o.right.token.type===tokenType.id?parseInt(symbolTable[get_symtab(o.right.token)].const):parseInt(o.right.token.id),s=output_out_math_exp(e,o.right.right)}else o.right.token.type===tokenType.id?s=parseInt(symbolTable[get_symtab(o.right.token)].const):o.right.token.type===tokenType.const?s=parseInt(o.right.token.id):o.right.token.type===tokenType.not&&(o.right.right.token.type===tokenType.id?s=parseInt(symbolTable[get_symtab(o.right.right.token)].const):o.right.right.token.type===tokenType.const&&(s=parseInt(o.right.right.token.id)));switch(o.type){case tokenType.less:k.boolean=k.number<s,k.number=s;break;case tokenType.lessequal:k.boolean=k.number<=s,k.number=s;break;case tokenType.big:k.boolean=k.number>s,k.number=s;break;case tokenType.bigequal:k.boolean=k.number>=s,k.number=s;break;case tokenType.or:const e=output_out_logical_exp(o,!0);for(k.boolean=!(!k.boolean&&!e);o&&(o=o.right,!o||o.token.type!==tokenType.or););break;case tokenType.and:k.boolean=k.boolean&&!!s;break;case tokenType.not:k.boolean=!k.boolean;break;case tokenType.equal:k.boolean=k.number===s}if(!o)break;o=o.right.right,o&&o?.token?.type===tokenType.not&&(o=o.right)}return k.boolean},output_out_exp=(e,t,n,o,s)=>{if("("===e?.left?.left?.token.id)return;let k,l,r,a,i=-1,p=0;for(check_ast_type(e.token.type,"data_type")?(k=e.left.token,o+1&&proceduresPrototypes[o]?.args?.find((e=>e.id===k.id))?p=proceduresPrototypes[o]?.args.findIndex((e=>e.id===k.id)):i=get_symtab(e.left.token)):(k=e.token,o+1&&proceduresPrototypes[o]?.args.find((e=>e.id===k.id))?p=proceduresPrototypes[o]?.args.findIndex((e=>e.id===k.id)):e.token.type===tokenType.id&&(i=get_symtab(e.token))),l=o+1&&(r=proceduresPrototypes[o]?.args.find((e=>e.id===k.id)))?parseInt(r.value):i>-1?parseInt(symbolTable[i].value):parseInt(k.id),a=n?e.left:s?e.right:e;a;){switch(a.type){case tokenType.div:case tokenType.assingdiv:if(a.right.token.type===tokenType.const)l/=parseInt(a.right.token.id);else{let e;o+1&&(e=proceduresPrototypes[o]?.args.find((e=>e.id===a.right.token.id)))?l/=parseInt(e.value):(e=proceduresPrototypes.find((e=>e.id===a.right.token.id)))?(output_out_procedures(a.right,t),l/=e.return):l/=parseInt(symbolTable[get_symtab(a.right.token)].const)}s||(i>=0?symbolTable[i].const=l:proceduresPrototypes[o].args[p].value=l);break;case tokenType.mul:case tokenType.assingmul:if(a.right.token.type===tokenType.const)l*=parseInt(a.right.token.id);else{let e;o+1&&(e=proceduresPrototypes[o]?.args.find((e=>e.id===a.right.token.id)))?l+=parseInt(e.value):(e=proceduresPrototypes.find((e=>e.id===a.right.token.id)))?(output_out_procedures(a.right,t),l+=e.return):l+=parseInt(symbolTable[get_symtab(a.right.token)].const)}s||(i>=0?symbolTable[i].const=l:proceduresPrototypes[o].args[p].value=l);break;case tokenType.assig:if(a.right.token.type===tokenType.const)l=parseInt(a.right.token.id);else{let e;o+1&&(e=proceduresPrototypes[o]?.args.find((e=>e.id===a.right.token.id)))?l=parseInt(e.value):(e=proceduresPrototypes.find((e=>e.id===a.right.token.id)))?(output_out_procedures(a.right,t),l=e.return):l=parseInt(symbolTable[get_symtab(a.right.token)].const)}s||(i>=0?symbolTable[i].const=l:proceduresPrototypes[o].args[p].value=l);break;case tokenType.assingsum:case tokenType.add:if(a.right.token.type===tokenType.const)l+=parseInt(a.right.token.id);else{let e;o+1&&(e=proceduresPrototypes[o]?.args.find((e=>e.id===a.right.token.id)))?l+=parseInt(e.value):(e=proceduresPrototypes.find((e=>e.id===a.right.token.id)))?(output_out_procedures(a.right,t),l+=e.return):l+=parseInt(symbolTable[get_symtab(a.right.token)].const)}s||(i>=0?symbolTable[i].const=l:proceduresPrototypes[o].args[p].value=l);break;case tokenType.assingsub:case tokenType.sub:if(a.right.token.type===tokenType.const)l-=parseInt(a.right.token.id);else{let e;o+1&&(e=proceduresPrototypes[o]?.args.find((e=>e.id===a.right.token.id)))?l-=parseInt(e.value):(e=proceduresPrototypes.find((e=>e.id===a.right.token.id)))?(output_out_procedures(a.right,t),l-=e.return):l-=parseInt(symbolTable[get_symtab(a.right.token)].const)}s||(i>=0?symbolTable[i].const=l:proceduresPrototypes[o].args[p].value=l);break;case tokenType.semi:return a}a=a.right}return check_ast_type(e?.left?.right?.token.type,"id")?output_out_exp(e.left.right,t,!0,o,s):check_ast_type(e?.right?.token.type,"id")&&output_out_exp(e.right,t,!0,o,s),s&&(proceduresPrototypes[o].return=l),a},output_out_get_ast_check=(e,t)=>e.left.token.id===t.id,output_out_get_ast=(e,t)=>{if(!e)return null;if(check_ast_type(e.ast.type,"data_type")){if(output_out_get_ast_check(e.ast,t))return e.ast}return output_out_get_ast(e.next,t)},output_out_block=(e,t,n)=>{if(e){switch(e.type){case tokenType.i0:case tokenType.u0:case tokenType.i8:case tokenType.u8:case tokenType.i16:case tokenType.u16:case tokenType.i32:case tokenType.u32:case tokenType.i64:case tokenType.u64:case tokenType.f64:case tokenType.id:e.left&&output_out_exp(e,t,!1,n);break;case tokenType.if:output_out_ifelse(e,t,n);break;case tokenType.for:output_out_for(e,t,n);break;case tokenType.str:printf(e,n);break;case tokenType.call:output_out_procedures(e,t);break;case tokenType.return:return void output_out_return(e,t,n)}output_out_block(e.right,t,n),output_out_block(e.next,t,n)}},output_out_ifelse=(e,t,n)=>{const o=output_out_logical_exp(e,!1);let s;e.left?.left?.left?.left&&(s=e.left.left.left.left.right),o?output_out_block(e.left.left.left.right,t,n):s&&output_out_block(s,t,n),o||e?.left?.left?.left?.next?.token.type!==tokenType.if||output_out_ifelse(e.left.left.left.next,t)},output_out_for=(e,t,n)=>{const o=get_symtab(e.left.token),s=parseInt(e.right.right.token.id),k=e.left.left.left.left.token,l=parseInt(e.left.left.left.left.left.token.id);let r,a=e.left.left.left.left.left.left.left;switch(a.type===tokenType.id&&(a=e.left.left.left.left.left.left.left.right),r=check_ast_type(a.type,"assignment_operator")?parseInt(a.right.token.id):1,k.type){case tokenType.less:for(let k=s;k<l;k+=r)output_out_block(e.left.left.left.left.left.left.right,t,n),symbolTable[o].const=parseInt(symbolTable[o].const)+r;break;case tokenType.big:for(let k=s;k>l;k+=r)output_out_block(e.left.left.left.left.left.left.right,t,n),symbolTable[o].const=parseInt(symbolTable[o].const)+r}},output_out_procedures=(e,t)=>{const n=output_out_get_ast(t,e.token),o=get_prototype(n?.left?.token);let s=e.right,k=0;for(;proceduresPrototypes[o].args[k]&&s;)s.token.type===tokenType.id?proceduresPrototypes[o].args[k].value=symbolTable[get_symtab(s.token)].const:s.token.type===tokenType.const&&(proceduresPrototypes[o].args[k].value=s.token.id),k++,s=s.right;output_out_block(n.right,t,o)},output_out_return=(e,t,n)=>{output_out_exp(e.right,t,!1,n,!0)},output=e=>{let t=e;do{switch(t.ast.type){case tokenType.i0:case tokenType.u0:case tokenType.i8:case tokenType.u8:case tokenType.i16:case tokenType.u16:case tokenType.i32:case tokenType.u32:case tokenType.i64:case tokenType.u64:case tokenType.f64:case tokenType.id:output_out_exp(t.ast,e);break;case tokenType.if:output_out_ifelse(t.ast,e);break;case tokenType.for:output_out_for(t.ast,e);break;case tokenType.str:let n=t.ast;do{printf(n),n=n.right}while(n);break;case tokenType.call:output_out_procedures(t.ast,e)}t=t.next}while(t);return stdout},printf=(e,t)=>{let n=e.token.id;if(e.token.id.includes("%")){let o;n=t+1&&(o=proceduresPrototypes[t]?.args.find((t=>t.id===e.left.right.token.id)))?n.replace("%d",o.value):e.left.right.token.type===tokenType.const?n.replace("%d",e.left.right.token.id):n.replace("%d",symbolTable[get_symtab(e.left.right.token)].const)}stdout+=n.replace(/\\n|\\t/g,(e=>{switch(e){case"\\r":case"\\n":return"\n";case"\\t":return"    ";default:return e}}))};